package com.jsfprohtml5.megaapp.service;

import com.jsfprohtml5.megaapp.model.MegaUser;
import com.jsfprohtml5.megaapp.service.exception.UserAlreadyExists;
import com.jsfprohtml5.megaapp.service.exception.UserNotFound;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

/**
 *
 * @author Hazem Saleh <hazems@apache.org>
 */
@Stateless
public class MegaUserManager implements MegaUserManagerLocal {
    
    @PersistenceContext(unitName = "megaAppUnit")
    EntityManager em;  
    
    @Override
    public MegaUser getMegaUser(Integer userID) {
        Query query = em.createQuery("select megaUser.id, megaUser.loginName, "
                                     + "megaUser.firstName, megaUser.lastName from MegaUser megaUser where "
                                     + "megaUser.id = :id");
        
        query.setParameter("id", userID);

        Object[] megaUserInfo = (Object[]) query.getSingleResult();
        
        if (megaUserInfo == null) {
            return null;
        }
        
        MegaUser megaUser = new MegaUser(
                (Integer) megaUserInfo[0],
                (String) megaUserInfo[1], 
                (String) megaUserInfo[2], 
                (String) megaUserInfo[3], 
                null);
        
        return megaUser;        
    }

    @Override
    public MegaUser registerMegaUser(MegaUser user) throws UserAlreadyExists {
        Query query = em.createQuery("select megaUser from MegaUser megaUser where "
                    + "megaUser.loginName = :loginName");
        
        query.setParameter("loginName", user.getLoginName());

        try {
            query.getSingleResult();
            throw new UserAlreadyExists();
        } catch (NoResultException exception) {
            Logger.getLogger(BookManager.class.getName()).log(Level.FINER, "No user found");
        }
        
        em.persist(user);  
        
        return user;
    }

    @Override
    public void removeMegaUser(Integer userID) throws UserNotFound {
        MegaUser megaUser = em.find(MegaUser.class, userID);

        if (megaUser == null) {
            throw new UserNotFound();
        }
        
        em.remove(megaUser);
    }

}
